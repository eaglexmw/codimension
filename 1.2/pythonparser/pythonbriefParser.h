/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : pythonbrief.g
 *     -                            On : 2011-08-24 10:36:02
 *     -                for the parser : pythonbriefParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser pythonbriefParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef ppythonbriefParser, which is returned from a call to pythonbriefParserNew().
 *
 * The methods in ppythonbriefParser are  as follows:
 *
 *  - pythonbriefParser_single_input_return      ppythonbriefParser->single_input(ppythonbriefParser)
 *  - pythonbriefParser_file_input_return      ppythonbriefParser->file_input(ppythonbriefParser)
 *  - pythonbriefParser_eval_input_return      ppythonbriefParser->eval_input(ppythonbriefParser)
 *  - pythonbriefParser_decorator_return      ppythonbriefParser->decorator(ppythonbriefParser)
 *  - pythonbriefParser_decorators_return      ppythonbriefParser->decorators(ppythonbriefParser)
 *  - pythonbriefParser_decor_arglist_return      ppythonbriefParser->decor_arglist(ppythonbriefParser)
 *  - pythonbriefParser_funcdef_return      ppythonbriefParser->funcdef(ppythonbriefParser)
 *  - pythonbriefParser_parameters_return      ppythonbriefParser->parameters(ppythonbriefParser)
 *  - pythonbriefParser_defparameter_return      ppythonbriefParser->defparameter(ppythonbriefParser)
 *  - pythonbriefParser_varargslist_return      ppythonbriefParser->varargslist(ppythonbriefParser)
 *  - pythonbriefParser_fpdef_return      ppythonbriefParser->fpdef(ppythonbriefParser)
 *  - pythonbriefParser_fplist_return      ppythonbriefParser->fplist(ppythonbriefParser)
 *  - pythonbriefParser_stmt_return      ppythonbriefParser->stmt(ppythonbriefParser)
 *  - pythonbriefParser_simple_stmt_return      ppythonbriefParser->simple_stmt(ppythonbriefParser)
 *  - pythonbriefParser_small_stmt_return      ppythonbriefParser->small_stmt(ppythonbriefParser)
 *  - pythonbriefParser_expr_stmt_return      ppythonbriefParser->expr_stmt(ppythonbriefParser)
 *  - pythonbriefParser_augassign_return      ppythonbriefParser->augassign(ppythonbriefParser)
 *  - pythonbriefParser_print_stmt_return      ppythonbriefParser->print_stmt(ppythonbriefParser)
 *  - pythonbriefParser_printlist_return      ppythonbriefParser->printlist(ppythonbriefParser)
 *  - pythonbriefParser_del_stmt_return      ppythonbriefParser->del_stmt(ppythonbriefParser)
 *  - pythonbriefParser_pass_stmt_return      ppythonbriefParser->pass_stmt(ppythonbriefParser)
 *  - pythonbriefParser_flow_stmt_return      ppythonbriefParser->flow_stmt(ppythonbriefParser)
 *  - pythonbriefParser_break_stmt_return      ppythonbriefParser->break_stmt(ppythonbriefParser)
 *  - pythonbriefParser_continue_stmt_return      ppythonbriefParser->continue_stmt(ppythonbriefParser)
 *  - pythonbriefParser_return_stmt_return      ppythonbriefParser->return_stmt(ppythonbriefParser)
 *  - pythonbriefParser_yield_stmt_return      ppythonbriefParser->yield_stmt(ppythonbriefParser)
 *  - pythonbriefParser_raise_stmt_return      ppythonbriefParser->raise_stmt(ppythonbriefParser)
 *  - pythonbriefParser_import_stmt_return      ppythonbriefParser->import_stmt(ppythonbriefParser)
 *  - pythonbriefParser_import_name_return      ppythonbriefParser->import_name(ppythonbriefParser)
 *  - pythonbriefParser_import_from_return      ppythonbriefParser->import_from(ppythonbriefParser)
 *  - pythonbriefParser_import_path_return      ppythonbriefParser->import_path(ppythonbriefParser)
 *  - pythonbriefParser_import_as_name_return      ppythonbriefParser->import_as_name(ppythonbriefParser)
 *  - pythonbriefParser_dotted_as_name_return      ppythonbriefParser->dotted_as_name(ppythonbriefParser)
 *  - pythonbriefParser_import_as_names_return      ppythonbriefParser->import_as_names(ppythonbriefParser)
 *  - pythonbriefParser_dotted_as_names_return      ppythonbriefParser->dotted_as_names(ppythonbriefParser)
 *  - pythonbriefParser_dotted_name_return      ppythonbriefParser->dotted_name(ppythonbriefParser)
 *  - pythonbriefParser_global_stmt_return      ppythonbriefParser->global_stmt(ppythonbriefParser)
 *  - pythonbriefParser_exec_stmt_return      ppythonbriefParser->exec_stmt(ppythonbriefParser)
 *  - pythonbriefParser_assert_stmt_return      ppythonbriefParser->assert_stmt(ppythonbriefParser)
 *  - pythonbriefParser_compound_stmt_return      ppythonbriefParser->compound_stmt(ppythonbriefParser)
 *  - pythonbriefParser_if_stmt_return      ppythonbriefParser->if_stmt(ppythonbriefParser)
 *  - pythonbriefParser_elif_clause_return      ppythonbriefParser->elif_clause(ppythonbriefParser)
 *  - pythonbriefParser_while_stmt_return      ppythonbriefParser->while_stmt(ppythonbriefParser)
 *  - pythonbriefParser_for_stmt_return      ppythonbriefParser->for_stmt(ppythonbriefParser)
 *  - pythonbriefParser_try_stmt_return      ppythonbriefParser->try_stmt(ppythonbriefParser)
 *  - pythonbriefParser_try_closure_return      ppythonbriefParser->try_closure(ppythonbriefParser)
 *  - pythonbriefParser_except_closure_return      ppythonbriefParser->except_closure(ppythonbriefParser)
 *  - pythonbriefParser_with_stmt_return      ppythonbriefParser->with_stmt(ppythonbriefParser)
 *  - pythonbriefParser_with_item_return      ppythonbriefParser->with_item(ppythonbriefParser)
 *  - pythonbriefParser_except_clause_return      ppythonbriefParser->except_clause(ppythonbriefParser)
 *  - pythonbriefParser_suite_return      ppythonbriefParser->suite(ppythonbriefParser)
 *  - pythonbriefParser_testlist_safe_return      ppythonbriefParser->testlist_safe(ppythonbriefParser)
 *  - pythonbriefParser_old_test_return      ppythonbriefParser->old_test(ppythonbriefParser)
 *  - pythonbriefParser_old_lambdef_return      ppythonbriefParser->old_lambdef(ppythonbriefParser)
 *  - pythonbriefParser_test_return      ppythonbriefParser->test(ppythonbriefParser)
 *  - pythonbriefParser_or_test_return      ppythonbriefParser->or_test(ppythonbriefParser)
 *  - pythonbriefParser_and_test_return      ppythonbriefParser->and_test(ppythonbriefParser)
 *  - pythonbriefParser_not_test_return      ppythonbriefParser->not_test(ppythonbriefParser)
 *  - pythonbriefParser_comparison_return      ppythonbriefParser->comparison(ppythonbriefParser)
 *  - pythonbriefParser_comp_op_return      ppythonbriefParser->comp_op(ppythonbriefParser)
 *  - pythonbriefParser_expr_return      ppythonbriefParser->expr(ppythonbriefParser)
 *  - pythonbriefParser_xor_expr_return      ppythonbriefParser->xor_expr(ppythonbriefParser)
 *  - pythonbriefParser_and_expr_return      ppythonbriefParser->and_expr(ppythonbriefParser)
 *  - pythonbriefParser_shift_expr_return      ppythonbriefParser->shift_expr(ppythonbriefParser)
 *  - pythonbriefParser_arith_expr_return      ppythonbriefParser->arith_expr(ppythonbriefParser)
 *  - pythonbriefParser_term_return      ppythonbriefParser->term(ppythonbriefParser)
 *  - pythonbriefParser_factor_return      ppythonbriefParser->factor(ppythonbriefParser)
 *  - pythonbriefParser_power_return      ppythonbriefParser->power(ppythonbriefParser)
 *  - pythonbriefParser_atom_return      ppythonbriefParser->atom(ppythonbriefParser)
 *  - pythonbriefParser_listmaker_return      ppythonbriefParser->listmaker(ppythonbriefParser)
 *  - pythonbriefParser_testlist_comp_return      ppythonbriefParser->testlist_comp(ppythonbriefParser)
 *  - pythonbriefParser_lambdef_return      ppythonbriefParser->lambdef(ppythonbriefParser)
 *  - pythonbriefParser_trailer_return      ppythonbriefParser->trailer(ppythonbriefParser)
 *  - pythonbriefParser_subscriptlist_return      ppythonbriefParser->subscriptlist(ppythonbriefParser)
 *  - pythonbriefParser_subscript_return      ppythonbriefParser->subscript(ppythonbriefParser)
 *  - pythonbriefParser_sliceop_return      ppythonbriefParser->sliceop(ppythonbriefParser)
 *  - pythonbriefParser_exprlist_return      ppythonbriefParser->exprlist(ppythonbriefParser)
 *  - pythonbriefParser_testlist_return      ppythonbriefParser->testlist(ppythonbriefParser)
 *  - pythonbriefParser_dictorsetmaker_return      ppythonbriefParser->dictorsetmaker(ppythonbriefParser)
 *  - pythonbriefParser_dictmakerclause_return      ppythonbriefParser->dictmakerclause(ppythonbriefParser)
 *  - pythonbriefParser_setmakerclause_return      ppythonbriefParser->setmakerclause(ppythonbriefParser)
 *  - pythonbriefParser_classdef_return      ppythonbriefParser->classdef(ppythonbriefParser)
 *  - pythonbriefParser_inheritancelist_return      ppythonbriefParser->inheritancelist(ppythonbriefParser)
 *  - pythonbriefParser_arglist_return      ppythonbriefParser->arglist(ppythonbriefParser)
 *  - pythonbriefParser_argument_return      ppythonbriefParser->argument(ppythonbriefParser)
 *  - pythonbriefParser_list_iter_return      ppythonbriefParser->list_iter(ppythonbriefParser)
 *  - pythonbriefParser_list_for_return      ppythonbriefParser->list_for(ppythonbriefParser)
 *  - pythonbriefParser_list_if_return      ppythonbriefParser->list_if(ppythonbriefParser)
 *  - pythonbriefParser_comp_iter_return      ppythonbriefParser->comp_iter(ppythonbriefParser)
 *  - pythonbriefParser_comp_for_return      ppythonbriefParser->comp_for(ppythonbriefParser)
 *  - pythonbriefParser_comp_if_return      ppythonbriefParser->comp_if(ppythonbriefParser)
 *  - pythonbriefParser_testlist1_return      ppythonbriefParser->testlist1(ppythonbriefParser)
 *  - pythonbriefParser_yield_expr_return      ppythonbriefParser->yield_expr(ppythonbriefParser)
 *  - pythonbriefParser_string_return      ppythonbriefParser->string(ppythonbriefParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_pythonbriefParser_H
#define _pythonbriefParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct pythonbriefParser_Ctx_struct pythonbriefParser, * ppythonbriefParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct pythonbriefParser_single_input_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_single_input_return;

typedef struct pythonbriefParser_file_input_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_file_input_return;

typedef struct pythonbriefParser_eval_input_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_eval_input_return;

typedef struct pythonbriefParser_decorator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_decorator_return;

typedef struct pythonbriefParser_decorators_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_decorators_return;

typedef struct pythonbriefParser_decor_arglist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_decor_arglist_return;

typedef struct pythonbriefParser_funcdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_funcdef_return;

typedef struct pythonbriefParser_parameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_parameters_return;

typedef struct pythonbriefParser_defparameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_defparameter_return;

typedef struct pythonbriefParser_varargslist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_varargslist_return;

typedef struct pythonbriefParser_fpdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_fpdef_return;

typedef struct pythonbriefParser_fplist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_fplist_return;

typedef struct pythonbriefParser_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_stmt_return;

typedef struct pythonbriefParser_simple_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_simple_stmt_return;

typedef struct pythonbriefParser_small_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_small_stmt_return;

typedef struct pythonbriefParser_expr_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_expr_stmt_return;

typedef struct pythonbriefParser_augassign_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_augassign_return;

typedef struct pythonbriefParser_print_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_print_stmt_return;

typedef struct pythonbriefParser_printlist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_printlist_return;

typedef struct pythonbriefParser_del_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_del_stmt_return;

typedef struct pythonbriefParser_pass_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_pass_stmt_return;

typedef struct pythonbriefParser_flow_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_flow_stmt_return;

typedef struct pythonbriefParser_break_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_break_stmt_return;

typedef struct pythonbriefParser_continue_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_continue_stmt_return;

typedef struct pythonbriefParser_return_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_return_stmt_return;

typedef struct pythonbriefParser_yield_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_yield_stmt_return;

typedef struct pythonbriefParser_raise_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_raise_stmt_return;

typedef struct pythonbriefParser_import_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_import_stmt_return;

typedef struct pythonbriefParser_import_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_import_name_return;

typedef struct pythonbriefParser_import_from_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_import_from_return;

typedef struct pythonbriefParser_import_path_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_import_path_return;

typedef struct pythonbriefParser_import_as_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_import_as_name_return;

typedef struct pythonbriefParser_dotted_as_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_dotted_as_name_return;

typedef struct pythonbriefParser_import_as_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_import_as_names_return;

typedef struct pythonbriefParser_dotted_as_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_dotted_as_names_return;

typedef struct pythonbriefParser_dotted_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_dotted_name_return;

typedef struct pythonbriefParser_global_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_global_stmt_return;

typedef struct pythonbriefParser_exec_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_exec_stmt_return;

typedef struct pythonbriefParser_assert_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_assert_stmt_return;

typedef struct pythonbriefParser_compound_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_compound_stmt_return;

typedef struct pythonbriefParser_if_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_if_stmt_return;

typedef struct pythonbriefParser_elif_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_elif_clause_return;

typedef struct pythonbriefParser_while_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_while_stmt_return;

typedef struct pythonbriefParser_for_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_for_stmt_return;

typedef struct pythonbriefParser_try_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_try_stmt_return;

typedef struct pythonbriefParser_try_closure_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_try_closure_return;

typedef struct pythonbriefParser_except_closure_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_except_closure_return;

typedef struct pythonbriefParser_with_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_with_stmt_return;

typedef struct pythonbriefParser_with_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_with_item_return;

typedef struct pythonbriefParser_except_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_except_clause_return;

typedef struct pythonbriefParser_suite_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_suite_return;

typedef struct pythonbriefParser_testlist_safe_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_testlist_safe_return;

typedef struct pythonbriefParser_old_test_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_old_test_return;

typedef struct pythonbriefParser_old_lambdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_old_lambdef_return;

typedef struct pythonbriefParser_test_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_test_return;

typedef struct pythonbriefParser_or_test_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_or_test_return;

typedef struct pythonbriefParser_and_test_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_and_test_return;

typedef struct pythonbriefParser_not_test_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_not_test_return;

typedef struct pythonbriefParser_comparison_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_comparison_return;

typedef struct pythonbriefParser_comp_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_comp_op_return;

typedef struct pythonbriefParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_expr_return;

typedef struct pythonbriefParser_xor_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_xor_expr_return;

typedef struct pythonbriefParser_and_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_and_expr_return;

typedef struct pythonbriefParser_shift_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_shift_expr_return;

typedef struct pythonbriefParser_arith_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_arith_expr_return;

typedef struct pythonbriefParser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_term_return;

typedef struct pythonbriefParser_factor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_factor_return;

typedef struct pythonbriefParser_power_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_power_return;

typedef struct pythonbriefParser_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_atom_return;

typedef struct pythonbriefParser_listmaker_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_listmaker_return;

typedef struct pythonbriefParser_testlist_comp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_testlist_comp_return;

typedef struct pythonbriefParser_lambdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_lambdef_return;

typedef struct pythonbriefParser_trailer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_trailer_return;

typedef struct pythonbriefParser_subscriptlist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_subscriptlist_return;

typedef struct pythonbriefParser_subscript_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_subscript_return;

typedef struct pythonbriefParser_sliceop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_sliceop_return;

typedef struct pythonbriefParser_exprlist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_exprlist_return;

typedef struct pythonbriefParser_testlist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_testlist_return;

typedef struct pythonbriefParser_dictorsetmaker_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_dictorsetmaker_return;

typedef struct pythonbriefParser_dictmakerclause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_dictmakerclause_return;

typedef struct pythonbriefParser_setmakerclause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_setmakerclause_return;

typedef struct pythonbriefParser_classdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_classdef_return;

typedef struct pythonbriefParser_inheritancelist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_inheritancelist_return;

typedef struct pythonbriefParser_arglist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_arglist_return;

typedef struct pythonbriefParser_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_argument_return;

typedef struct pythonbriefParser_list_iter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_list_iter_return;

typedef struct pythonbriefParser_list_for_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_list_for_return;

typedef struct pythonbriefParser_list_if_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_list_if_return;

typedef struct pythonbriefParser_comp_iter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_comp_iter_return;

typedef struct pythonbriefParser_comp_for_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_comp_for_return;

typedef struct pythonbriefParser_comp_if_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_comp_if_return;

typedef struct pythonbriefParser_testlist1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_testlist1_return;

typedef struct pythonbriefParser_yield_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_yield_expr_return;

typedef struct pythonbriefParser_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    pythonbriefParser_string_return;



/** Context tracking structure for pythonbriefParser
 */
struct pythonbriefParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     pythonbriefParser_single_input_return (*single_input)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_file_input_return (*file_input)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_eval_input_return (*eval_input)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_decorator_return (*decorator)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_decorators_return (*decorators)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_decor_arglist_return (*decor_arglist)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_funcdef_return (*funcdef)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_parameters_return (*parameters)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_defparameter_return (*defparameter)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_varargslist_return (*varargslist)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_fpdef_return (*fpdef)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_fplist_return (*fplist)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_stmt_return (*stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_simple_stmt_return (*simple_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_small_stmt_return (*small_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_expr_stmt_return (*expr_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_augassign_return (*augassign)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_print_stmt_return (*print_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_printlist_return (*printlist)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_del_stmt_return (*del_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_pass_stmt_return (*pass_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_flow_stmt_return (*flow_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_break_stmt_return (*break_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_continue_stmt_return (*continue_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_return_stmt_return (*return_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_yield_stmt_return (*yield_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_raise_stmt_return (*raise_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_import_stmt_return (*import_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_import_name_return (*import_name)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_import_from_return (*import_from)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_import_path_return (*import_path)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_import_as_name_return (*import_as_name)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_dotted_as_name_return (*dotted_as_name)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_import_as_names_return (*import_as_names)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_dotted_as_names_return (*dotted_as_names)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_dotted_name_return (*dotted_name)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_global_stmt_return (*global_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_exec_stmt_return (*exec_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_assert_stmt_return (*assert_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_compound_stmt_return (*compound_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_if_stmt_return (*if_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_elif_clause_return (*elif_clause)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_while_stmt_return (*while_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_for_stmt_return (*for_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_try_stmt_return (*try_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_try_closure_return (*try_closure)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_except_closure_return (*except_closure)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_with_stmt_return (*with_stmt)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_with_item_return (*with_item)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_except_clause_return (*except_clause)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_suite_return (*suite)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_testlist_safe_return (*testlist_safe)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_old_test_return (*old_test)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_old_lambdef_return (*old_lambdef)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_test_return (*test)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_or_test_return (*or_test)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_and_test_return (*and_test)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_not_test_return (*not_test)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_comparison_return (*comparison)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_comp_op_return (*comp_op)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_expr_return (*expr)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_xor_expr_return (*xor_expr)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_and_expr_return (*and_expr)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_shift_expr_return (*shift_expr)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_arith_expr_return (*arith_expr)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_term_return (*term)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_factor_return (*factor)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_power_return (*power)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_atom_return (*atom)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_listmaker_return (*listmaker)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_testlist_comp_return (*testlist_comp)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_lambdef_return (*lambdef)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_trailer_return (*trailer)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_subscriptlist_return (*subscriptlist)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_subscript_return (*subscript)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_sliceop_return (*sliceop)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_exprlist_return (*exprlist)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_testlist_return (*testlist)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_dictorsetmaker_return (*dictorsetmaker)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_dictmakerclause_return (*dictmakerclause)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_setmakerclause_return (*setmakerclause)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_classdef_return (*classdef)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_inheritancelist_return (*inheritancelist)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_arglist_return (*arglist)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_argument_return (*argument)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_list_iter_return (*list_iter)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_list_for_return (*list_for)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_list_if_return (*list_if)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_comp_iter_return (*comp_iter)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_comp_for_return (*comp_for)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_comp_if_return (*comp_if)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_testlist1_return (*testlist1)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_yield_expr_return (*yield_expr)	(struct pythonbriefParser_Ctx_struct * ctx);
     pythonbriefParser_string_return (*string)	(struct pythonbriefParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred9_pythonbrief)	(struct pythonbriefParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred12_pythonbrief)	(struct pythonbriefParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred24_pythonbrief)	(struct pythonbriefParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred90_pythonbrief)	(struct pythonbriefParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred144_pythonbrief)	(struct pythonbriefParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred147_pythonbrief)	(struct pythonbriefParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred165_pythonbrief)	(struct pythonbriefParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred180_pythonbrief)	(struct pythonbriefParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred194_pythonbrief)	(struct pythonbriefParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct pythonbriefParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API ppythonbriefParser pythonbriefParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API ppythonbriefParser pythonbriefParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EXCEPT_STMT      39
#define EXPONENT      93
#define STAR      53
#define NONZERODIGIT      83
#define T__159      159
#define T__158      158
#define WHAT      23
#define TRIAPOS      74
#define NONZEROOCTDIGIT      88
#define T__160      160
#define LONGBYTES      78
#define EOF      -1
#define AUG_ASSIGN      47
#define IMPORT_STMT      22
#define BREAK_STMT      11
#define T__161      161
#define LEADING_WS      98
#define DBL_STAR_ARG      36
#define OCTINTEGER      80
#define RPAREN      51
#define NAME      55
#define NAME_ARG      34
#define STRING_LITERAL      42
#define DICTIONARY      41
#define FINALLY_STMT      38
#define T__148      148
#define T__147      147
#define T__149      149
#define DOTTED_NAME      18
#define CONTINUE_STMT      12
#define BODY      8
#define COMMENT      49
#define T__154      154
#define SHORTBYTES      77
#define T__155      155
#define T__156      156
#define T__99      99
#define T__157      157
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define RBRACK      61
#define T__139      139
#define T__138      138
#define T__137      137
#define T__136      136
#define ARGUMENTS      33
#define ESCAPESEQ      73
#define LCURLY      62
#define FUNC_DEF      7
#define T__141      141
#define LIST      40
#define T__142      142
#define T__140      140
#define T__145      145
#define GLOBAL_STMT      21
#define T__146      146
#define T__143      143
#define T__144      144
#define T__126      126
#define SHORTSTRING      71
#define T__125      125
#define T__128      128
#define DECOR      17
#define T__127      127
#define WS      97
#define T__129      129
#define WHILE_STMT      28
#define INTPART      91
#define BINDIGIT      87
#define NOT_IN      43
#define BYTESLITERAL      69
#define FLOATNUMBER      66
#define LONGINT      65
#define PASS_STMT      10
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define EXPONENTFLOAT      90
#define CONTINUED_LINE      96
#define LBRACK      60
#define CLASS_INHERITANCE      32
#define DOUBLESTAR      54
#define ELSE_STMT      26
#define T__118      118
#define BYTESPREFIX      76
#define T__119      119
#define T__116      116
#define T__117      117
#define TRY_STMT      37
#define T__114      114
#define TEST_LIST      31
#define T__115      115
#define OCTDIGIT      85
#define T__124      124
#define BININTEGER      82
#define T__123      123
#define T__122      122
#define T__121      121
#define T__120      120
#define DEDENT      5
#define ELIF_STMT      27
#define DEL_STMT      9
#define POINTFLOAT      89
#define LPAREN      50
#define WITH_STMT      30
#define INDENT      4
#define PRINT_STMT      16
#define STRINGPREFIX      70
#define AS      24
#define IS_NOT      44
#define T__107      107
#define COMMA      52
#define T__108      108
#define T__109      109
#define T__103      103
#define T__104      104
#define EXEC_STMT      20
#define IF_STMT      25
#define T__105      105
#define T__106      106
#define T__111      111
#define T__110      110
#define T__113      113
#define T__112      112
#define DIGIT      84
#define DOT      59
#define IMAGNUMBER      67
#define RETURN_STMT      13
#define INTEGER      64
#define T__102      102
#define HEXINTEGER      81
#define T__101      101
#define T__100      100
#define STAR_ARG      35
#define SEMI      57
#define LONGSTRING      72
#define YIELD_STMT      15
#define TRIQUOTE      75
#define COLON      56
#define HEAD_NAME      46
#define TRAILER_NAME      45
#define FOR_STMT      29
#define ASSERT_STMT      19
#define NEWLINE      48
#define STRINGLITERAL      68
#define RCURLY      63
#define ID_CONTINUE      95
#define ASSIGN      58
#define DECIMALINTEGER      79
#define RAISE_STMT      14
#define FRACTION      92
#define ID_START      94
#define CLASS_DEF      6
#define HEXDIGIT      86
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for pythonbriefParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
