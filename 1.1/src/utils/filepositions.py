#
# -*- coding: utf-8 -*-
#
# codimension - graphics python two-way code editor and analyzer
# Copyright (C) 2010  Sergey Satskiy <sergey.satskiy@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $Id$
#

" Provides the storage for the last position in a file "

import os.path, logging


class FilesPositions:
    " Loads/stores/saves the last position in files "

    def __init__( self, dirName ):

        self.__filePos = {}   # file name -> (line, pos)

        dirName = os.path.abspath( str( dirName ) )
        if not dirName.endswith( os.path.sep ):
            dirName += os.path.sep
        if not os.path.isdir( dirName ):
            raise Exception( "Directory name is expected for files " \
                             "positions. The given " + dirName + " is not." )

        self.__fileName = dirName + "lastpos"
        if os.path.exists( self.__fileName ):
            self.__load()
        return

    def __del__( self ):
        " Saves the content when destroyed "
        self.save()
        return

    def __load( self ):
        " Loads the saved positions file "
        try:
            f = open( self.__fileName )
            for line in f:
                line = line.strip()
                if line.startswith( '#' ) or line == "":
                    continue
                parts = line.split( ':' )
                if len( parts ) < 4:
                    # Bad format, skip the line
                    continue
                try:
                    line = int( parts[ 0 ] )
                    pos = int( parts[ 1 ] )
                    firstLine = int( parts[ 2 ] )
                    fileName = ":".join( parts[ 3: ] )
                    self.__filePos[ fileName ] = (line, pos, firstLine)
                except:
                    # Bad int() conversion or similar, skip it
                    pass
            f.close()
        except Exception, exc:
            logging.warning( "Cannot load file positions from " + \
                             self.__fileName + ". Message: " + \
                             str( exc ) )
        return

    def save( self ):
        " Saves the positions into a file "
        try:
            f = open( self.__fileName, "w" )
            f.write( "# Autogenerated. Do not edit it.\n" )
            for key in self.__filePos:
                value = self.__filePos[ key ]
                f.write( str( value[ 0 ] ) + ":" + \
                         str( value[ 1 ] ) + ":" + \
                         str( value[ 2 ] ) + ":" + key + "\n" )
            f.close()
        except Exception, exc:
            logging.warning( "Cannot save file positions to " + \
                             self.__fileName + ". Message: " + \
                             str( exc ) )
        return

    def getPosition( self, fileName ):
        " Provides the position or (-1,-1,-1) if not found "
        try:
            return self.__filePos[ fileName ]
        except:
            return (-1, -1, -1)


    def updatePosition( self, fileName, line, pos, firstLine ):
        " Updates the position for the file "

        self.__filePos[ fileName ] = (line, pos, firstLine)
        return

