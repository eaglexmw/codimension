#
# -*- coding: utf-8 -*-
#
# codimension - graphics python two-way code editor and analyzer
# Copyright (C) 2010  Sergey Satskiy <sergey.satskiy@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $Id$
#

#
# The file was taken from eric 4.4.3 and adopted for codimension.
# Original copyright:
# Copyright (c) 2007 - 2010 Detlev Offenbach <detlev@die-offenbachs.de>
#


""" exporter to RTF """

# This code is a port of the C++ code found in SciTE 1.74
# Original code: Copyright 1998-2006 by Neil Hodgson <neilh@scintilla.org>

import time

from PyQt4.QtCore import Qt
from PyQt4.QtGui import QCursor, QApplication, QFont, QFontInfo
from PyQt4.Qsci import QsciScintilla

from exportbase import ExportBase



class RTFExport( ExportBase ):
    """ Export to RTF """

    RTF_HEADEROPEN = "{\\rtf1\\ansi\\deff0\\deftab720"
    RTF_HEADERCLOSE = "\n"
    RTF_FONTDEFOPEN = "{\\fonttbl"
    RTF_FONTDEF = "{\\f%d\\fnil\\fcharset%u %s;}"
    RTF_FONTDEFCLOSE = "}"
    RTF_COLORDEFOPEN = "{\\colortbl"
    RTF_COLORDEF = "\\red%d\\green%d\\blue%d;"
    RTF_COLORDEFCLOSE = "}"
    RTF_INFOOPEN = "{\\info "
    RTF_INFOCLOSE = "}"
    RTF_COMMENT = "{\\comment Generated by eric4's RTF export filter.}"
    RTF_CREATED = "{\creatim\yr%Y\mo%m\dy%d\hr%H\min%M\sec%S}" # to be used by strftime
    RTF_BODYOPEN = ""
    RTF_BODYCLOSE = "}"

    RTF_SETFONTFACE = "\\f"
    RTF_SETFONTSIZE = "\\fs"
    RTF_SETCOLOR = "\\cf"
    RTF_SETBACKGROUND = "\\highlight"
    RTF_BOLD_ON = "\\b"
    RTF_BOLD_OFF = "\\b0"
    RTF_ITALIC_ON = "\\i"
    RTF_ITALIC_OFF = "\\i0"

    RTF_EOLN = "\\par\n"
    RTF_TAB = "\\tab "

    RTF_COLOR = "#000000"

    def __init__( self, editor, parent = None ):

        ExportBase.__init__( self, editor, parent )
        return

    def __GetRTFNextControl( self, pos, style ):
        """ Extracts the next RTF control word from style """

        # \f0\fs20\cf0\highlight0\b0\i0
        if pos >= len( style ):
            return pos, ""

        oldpos = pos
        pos += 1    # implicit skip over leading '\'
        while pos < len( style ) and style[ pos ] != '\\':
            pos += 1
        return pos, style[ oldpos : pos ]

    def __GetRTFStyleChange( self, last, current ):
        """ Extracts control words that are different between two styles """

        # \f0\fs20\cf0\highlight0\b0\i0
        lastPos = 0
        currentPos = 0
        delta = ''
        i = 0
        while i < 6:
            lastPos, lastControl = self.__GetRTFNextControl( lastPos, last )
            currentPos, currentControl = self.__GetRTFNextControl( currentPos, current )
            if lastControl != currentControl:
                delta += currentControl
            i += 1
        if delta != '':
            delta += ' '
        return delta

    def exportSource( self, srcFileName, saveToFileName ):
        """ Performing the export """

        if saveToFileName == "":
            raise Exception( "File name to export to is not provided" )

        QApplication.setOverrideCursor( QCursor( Qt.WaitCursor ) )
        QApplication.processEvents()

        try:
            self.editor.recolor( 0, -1 )
            lex = self.editor.lexer_

            tabSize = 4
            # TODO: this may come from settings
            wysiwyg = True
            if wysiwyg:
                if lex:
                    defaultFont = lex.font( QsciScintilla.STYLE_DEFAULT )
                else:
                    defaultFont = QFont()
                    defaultFont.fromString( "Courier,10,-1,5,50,0,0,0,0,0" )
            else:
                defaultFont = QFont()
                defaultFont.fromString( "Courier,10,-1,5,50,0,0,0,0,0" )
            fontface = defaultFont.family()
            fontsize = QFontInfo( defaultFont ).pointSize() << 1
            if fontsize == 0:
                fontsize = 10 << 1
            characterset = QsciScintilla.SC_CHARSET_DEFAULT
            tabs = False

            if lex:
                fgColour = lex.color( QsciScintilla.STYLE_DEFAULT )
                bgColour = lex.paper( QsciScintilla.STYLE_DEFAULT )
            else:
                fgColour = self.editor.color()
                bgColour = self.editor.paper()

            f = open( saveToFileName, "wb" )

            styles = {}
            fonts = {}
            colors = {}
            lastStyle = ""

            f.write( self.RTF_HEADEROPEN + self.RTF_FONTDEFOPEN )
            fonts[ 0 ] = fontface
            fontCount = 1
            f.write( self.RTF_FONTDEF % (0, characterset, fontface) )
            colors[ 0 ] = fgColour
            colors[ 1 ] = bgColour
            colorCount = 2

            if lex:
                istyle = 0
                while istyle <= QsciScintilla.STYLE_MAX:
                    if (istyle < QsciScintilla.STYLE_DEFAULT or \
                        istyle > QsciScintilla.STYLE_LASTPREDEFINED):
                        if not lex.description(istyle).isEmpty():
                            font = lex.font(istyle)
                            if wysiwyg:
                                fontKey = None
                                for key, value in fonts.items():
                                    if value.compare(\
                                       font.family(), Qt.CaseInsensitive) == 0:
                                        fontKey = key
                                        break
                                if fontKey is None:
                                    fonts[fontCount] = font.family()
                                    f.write(self.RTF_FONTDEF % \
                                        (fontCount, characterset, font.family()))
                                    fontKey = fontCount
                                    fontCount += 1
                                lastStyle = self.RTF_SETFONTFACE + "%d" % fontKey
                            else:
                                lastStyle = self.RTF_SETFONTFACE + "0"

                            if wysiwyg and QFontInfo(font).pointSize():
                                lastStyle += self.RTF_SETFONTSIZE + \
                                             "%d" % (QFontInfo(font).pointSize() << 1)
                            else:
                                lastStyle += self.RTF_SETFONTSIZE + \
                                             "%d" % fontsize

                            sColour = lex.color(istyle)
                            sColourKey = None
                            for key, value in colors.items():
                                if value == sColour:
                                    sColourKey = key
                                    break
                            if sColourKey is None:
                                colors[colorCount] = sColour
                                sColourKey = colorCount
                                colorCount += 1
                            lastStyle += self.RTF_SETCOLOR + "%d" % sColourKey

                            sColour = lex.paper(istyle)
                            sColourKey = None
                            for key, value in colors.items():
                                if value == sColour:
                                    sColourKey = key
                                    break
                            if sColourKey is None:
                                colors[colorCount] = sColour
                                sColourKey = colorCount
                                colorCount += 1
                            lastStyle += self.RTF_SETBACKGROUND + "%d" % sColourKey

                            if font.bold():
                                lastStyle += self.RTF_BOLD_ON
                            else:
                                lastStyle += self.RTF_BOLD_OFF
                            if font.italic():
                                lastStyle += self.RTF_ITALIC_ON
                            else:
                                lastStyle += self.RTF_ITALIC_OFF
                            styles[istyle] = lastStyle
                        else:
                            styles[istyle] = self.RTF_SETFONTFACE + "0" + \
                                             self.RTF_SETFONTSIZE + \
                                             "%d" % fontsize + \
                                             self.RTF_SETCOLOR + "0" + \
                                             self.RTF_SETBACKGROUND + "1" + \
                                             self.RTF_BOLD_OFF + self.RTF_ITALIC_OFF

                    istyle += 1
            else:
                styles[0] = self.RTF_SETFONTFACE + "0" + \
                            self.RTF_SETFONTSIZE + "%d" % fontsize + \
                            self.RTF_SETCOLOR + "0" + \
                            self.RTF_SETBACKGROUND + "1" + \
                            self.RTF_BOLD_OFF + self.RTF_ITALIC_OFF

            f.write(self.RTF_FONTDEFCLOSE + self.RTF_COLORDEFOPEN)
            for value in colors.values():
                f.write(self.RTF_COLORDEF % \
                        (value.red(), value.green(), value.blue()))
            f.write(self.RTF_COLORDEFCLOSE)
            f.write(self.RTF_INFOOPEN + self.RTF_COMMENT)
            f.write(time.strftime(self.RTF_CREATED))
            f.write(self.RTF_INFOCLOSE)
            f.write(self.RTF_HEADERCLOSE + \
                    self.RTF_BODYOPEN + self.RTF_SETFONTFACE + "0" + \
                    self.RTF_SETFONTSIZE + "%d" % fontsize + \
                    self.RTF_SETCOLOR + "0 ")
            lastStyle = self.RTF_SETFONTFACE + "0" + \
                        self.RTF_SETFONTSIZE + "%d" % fontsize + \
                        self.RTF_SETCOLOR + "0" + \
                        self.RTF_SETBACKGROUND + "1" + \
                        self.RTF_BOLD_OFF + self.RTF_ITALIC_OFF

            lengthDoc = self.editor.length()
            prevCR = False
            column = 0
            pos = 0
            deltaStyle = ""
            styleCurrent = -1
            utf8 = self.editor.isUtf8()
            utf8Ch = ""
            utf8Len = 0

            while pos < lengthDoc:
                ch = self.editor.rawCharAt( pos )
                style = self.editor.styleAt( pos )
                if style != styleCurrent:
                    deltaStyle = self.__GetRTFStyleChange( lastStyle, styles[style] )
                    if deltaStyle:
                        f.write(deltaStyle)
                    styleCurrent = style
                    lastStyle = styles[style]

                if ch == '{':
                    f.write('\\{')
                elif ch == '}':
                    f.write('\\}')
                elif ch == '\\':
                    f.write('\\\\')
                elif ch == '\t':
                    if tabs:
                        f.write( self.RTF_TAB )
                    else:
                        ts = tabSize - (column % tabSize)
                        f.write(' ' * ts)
                        column += ts - 1
                elif ch == '\n':
                    if not prevCR:
                        f.write( self.RTF_EOLN )
                        column -= 1
                elif ch == '\r':
                    f.write( self.RTF_EOLN )
                    column -= 1
                else:
                    if ord( ch ) > 0x7F and utf8:
                        utf8Ch += ch
                        if utf8Len == 0:
                            if (ord(utf8Ch[0]) & 0xF0) == 0xF0:
                                utf8Len = 4
                            elif (ord(utf8Ch[0]) & 0xE0) == 0xE0:
                                utf8Len = 3
                            elif (ord(utf8Ch[0]) & 0xC0) == 0xC0:
                                utf8Len = 2
                            column -= 1 # will be incremented again later
                        elif len( utf8Ch ) == utf8Len:
                            ch = utf8Ch.decode( 'utf8' )
                            if ord(ch) <= 0xff:
                                f.write( "\\'%x" % ord(ch) )
                            else:
                                f.write( "\\u%d\\'%x" % (ord(ch), ord(ch) & 0xFF) )
                            utf8Ch = ""
                            utf8Len = 0
                        else:
                            column -= 1 # will be incremented again later
                    else:
                        f.write( ch )

                column += 1
                prevCR = ch == '\r'
                pos += 1

            f.write( self.RTF_BODYCLOSE )
            f.close()

        except:
            QApplication.restoreOverrideCursor()
            raise

        QApplication.restoreOverrideCursor()
        return

